function ax = plotInhibitoryBoutONOFF(bouts)
%MLT.PLOTINHIBITORYBOUTONOFF Plots binned beat rates with bout events.
%   ax = mlt.plotInhibitoryBoutONOFF(bouts) creates a plot of the binned
%   beat rate over time and overlays vertical lines indicating the onset
%   (RED) and offset (BLUE) of inhibitory bouts.
%
%   The function uses the binned rate data stored within the 'bouts'
%   structure, which should be generated by mlt.findInhibitoryBouts.
%
%   SYNTAX:
%   ax = mlt.plotInhibitoryBoutONOFF(bouts)
%
%   INPUTS:
%   bouts               - The output structure from mlt.findInhibitoryBouts.
%                         It must contain the fields:
%                         .beatRate
%                         .beatRateTimes
%                         .inhibitoryBoutOnset
%                         .inhibitoryBoutOffset
%
%   OUTPUTS:
%   ax                  - The handle to the axes of the generated plot.
%
%   EXAMPLE:
%       % 1. Create synthetic beat data
%       beat_times = [ (0:0.4:10), (10.5:1:20), (20.4:0.4:30) ]';
%
%       % 2. Find the inhibitory bouts (which now includes rate data)
%       bouts = mlt.findInhibitoryBouts(beat_times);
%
%       % 3. Plot the results directly from the bouts structure
%       figure;
%       ax = mlt.plotInhibitoryBoutONOFF(bouts);
%       title('Inhibitory Bout Detection');

% --- Input Argument Validation ---
arguments
    bouts (1,1) struct {mustContainFields(bouts, ["beatRate", "beatRateTimes", "inhibitoryBoutOnset", "inhibitoryBoutOffset"])}
end

% --- Step 1: Extract Data from Bouts Structure ---
rates = bouts.beatRate;
bin_centers = bouts.beatRateTimes;

% --- Step 2: Create the Plot ---
ax = gca; % Get current axes, or create new ones if a figure doesn't exist
plot(bin_centers, rates, 'k-o', 'MarkerSize', 4, 'LineWidth', 1, 'DisplayName', 'Binned Rate');
hold(ax, 'on');

% --- Step 3: Overlay Onset and Offset Markers ---

% Plot all onsets at once for performance
if ~isempty(bouts.inhibitoryBoutOnset)
    plot(ax, bouts.inhibitoryBoutOnset, ones(size(bouts.inhibitoryBoutOnset)), ...
        'ro', 'MarkerFaceColor', 'r', 'DisplayName', 'Bout Onset');
end

% Plot all offsets at once for performance
if ~isempty(bouts.inhibitoryBoutOffset)
    plot(ax, bouts.inhibitoryBoutOffset, ones(size(bouts.inhibitoryBoutOffset)), ...
        'bo', 'MarkerFaceColor', 'b', 'DisplayName', 'Bout Offset');
end


% --- Step 4: Finalize Plot Appearance ---
hold(ax, 'off');
ylabel('Beat Rate (Hz)');
grid on;
legend('show');

% Adjust x-axis label based on time format
if isdatetime(bin_centers)
    xlabel('Time');
else
    xlabel('Time (s)');
end

end

function mustContainFields(s, fields)
    % Custom validation function to ensure struct has the required fields
    if ~isfield(s, fields)
        eid = 'mlt:missingFields';
        msg = sprintf('Input struct must contain the fields: %s.', strjoin(fields, ', '));
        throwAsCaller(MException(eid, msg));
    end
end


